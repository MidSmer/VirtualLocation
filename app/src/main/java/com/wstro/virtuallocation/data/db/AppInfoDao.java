package com.wstro.virtuallocation.data.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.wstro.virtuallocation.data.model.AppInfo;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "APP_INFO".
*/
public class AppInfoDao extends AbstractDao<AppInfo, Long> {

    public static final String TABLENAME = "APP_INFO";

    /**
     * Properties of entity AppInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AppName = new Property(1, String.class, "appName", false, "APP_NAME");
        public final static Property PackageName = new Property(2, String.class, "packageName", false, "PACKAGE_NAME");
        public final static Property ApkFilePath = new Property(3, String.class, "apkFilePath", false, "APK_FILE_PATH");
        public final static Property VersionCode = new Property(4, int.class, "versionCode", false, "VERSION_CODE");
        public final static Property VersionName = new Property(5, String.class, "versionName", false, "VERSION_NAME");
        public final static Property UserId = new Property(6, int.class, "userId", false, "USER_ID");
    }


    public AppInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AppInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"APP_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"APP_NAME\" TEXT," + // 1: appName
                "\"PACKAGE_NAME\" TEXT," + // 2: packageName
                "\"APK_FILE_PATH\" TEXT," + // 3: apkFilePath
                "\"VERSION_CODE\" INTEGER NOT NULL ," + // 4: versionCode
                "\"VERSION_NAME\" TEXT," + // 5: versionName
                "\"USER_ID\" INTEGER NOT NULL );"); // 6: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"APP_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String apkFilePath = entity.getApkFilePath();
        if (apkFilePath != null) {
            stmt.bindString(4, apkFilePath);
        }
        stmt.bindLong(5, entity.getVersionCode());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(6, versionName);
        }
        stmt.bindLong(7, entity.getUserId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AppInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String appName = entity.getAppName();
        if (appName != null) {
            stmt.bindString(2, appName);
        }
 
        String packageName = entity.getPackageName();
        if (packageName != null) {
            stmt.bindString(3, packageName);
        }
 
        String apkFilePath = entity.getApkFilePath();
        if (apkFilePath != null) {
            stmt.bindString(4, apkFilePath);
        }
        stmt.bindLong(5, entity.getVersionCode());
 
        String versionName = entity.getVersionName();
        if (versionName != null) {
            stmt.bindString(6, versionName);
        }
        stmt.bindLong(7, entity.getUserId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AppInfo readEntity(Cursor cursor, int offset) {
        AppInfo entity = new AppInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // appName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // packageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // apkFilePath
            cursor.getInt(offset + 4), // versionCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // versionName
            cursor.getInt(offset + 6) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AppInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAppName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPackageName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setApkFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVersionCode(cursor.getInt(offset + 4));
        entity.setVersionName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserId(cursor.getInt(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AppInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AppInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AppInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
